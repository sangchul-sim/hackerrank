package warmup

import (
	"fmt"
	"sort"

	"hackerrank/util"
)

func Gaming(gameArr []int, iteration *int) {
	*iteration++
	gameMap := map[int]int{}
	for i, num := range gameArr {
		gameMap[num] = i
	}

	var sortArr []int
	sortArr = make([]int, len(gameArr))
	copy(sortArr, gameArr)

	fmt.Println("gameArr", gameArr)
	fmt.Println("sortArr", sortArr)

	sort.Sort(util.IntSlice(sortArr))
	maxVal := sortArr[len(sortArr)-1]

	//fmt.Println("gameArr", gameArr)
	//fmt.Println("sortArr", sortArr)
	//fmt.Println("maxVal", maxVal)
	//fmt.Println("gameMap", gameMap)

	if pos, ok := gameMap[maxVal]; ok {
		gameArr = append(gameArr[0:pos])
	}

	//fmt.Println("gameArr", gameArr, "count", len(gameArr))

	if len(gameArr) == 0 {
		return
	}

	Gaming(gameArr, iteration)
}

/**
getconf ARG_MAX
262144

5
182

173
10434 70803 22694 18767 86177 81074 17233 9577 60146 56463 22502 25305 73614 52947 26075 79394 51803 22002 1755 70080 70670 5551 93575 1553 87491 32718 69006 39974 19049 18672 88813 49541 98539 26825 60903 51004 39462 59624 80202 20104 7269 34723 62197 89259 85482 21845 44553 91193 88016 40335 81050 39559 64239 65656 69260 71341 37211 36233 58518 73161 48714 4505 90792 63772 77577 26804 47766 66676 39432 99714 10212 17821 59185 33640 57403 16954 9745 91028 34007 68676 24272 56620 13322 32590 87313 34277 70044 18706 96170 83844 26669 32127 65434 72685 95211 15324 57883 2525 78900 39914 35583 8510 52 78141 90015 45607 62347 7081 76544 7651 11328 69869 26221 75815 63240 74365 88633 14648 26027 98928 79956 1036 69554 78959 67241 92212 25159 69392 68674 21199 36037 26214 1415 15047 17421 64517 5224 5583 74414 10701 94636 76154 40625 78185 34400 58098 73914 58573 85260 50573 91196 56850 1905 10584 91568 3185 9746 82584 11510 54356 8890 16415 37923 40613 66232 64321 38115 68337 74789 36530 29004 95210 51758
193

160

153

*/
func GamingArray() {
	var (
		numOfGames int
		lenOfArr   int
		err        error
		iteration  int
	)
	gameArr := make([][]int, 2)

	if _, err := fmt.Scan(&numOfGames); err != nil {
		panic(err)
	}

	for i := 0; i < numOfGames; i++ {
		if _, err = fmt.Scan(&lenOfArr); err != nil {
			panic(err)
		}
		fmt.Println("lenOfArr", lenOfArr)
		//gameArr[i], err = intScanln(lenOfArr)
		gameArr[i], err = util.IntScanlnSlice(lenOfArr)
		if err != nil {
			panic(err)
		}
	}
	return

	for i := 0; i < numOfGames; i++ {
		iteration = 0
		Gaming(gameArr[i], &iteration)
		if iteration%2 == 0 {
			fmt.Println("ANDY")
		} else {
			fmt.Println("BOB")
		}
	}
}
